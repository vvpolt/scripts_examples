rm(list=ls())
library(tidyverse)
library(rvest)
###For Ridie to parse
ridie<-read_html("https://ridie.3ieimpact.org/index.php?r=search/index")
ridie%>%
  html_nodes("td")%>%
  html_text
###We need to open each link and see what'a inside
sub_ridie<-html_nodes(ridie, "td")%>%
  html_children()%>%
  html_attr("href")
sub_ridie <- sub_ridie[!is.na(sub_ridie)][1:20]
sub_ridie<-sub_ridie[seq(1, length(sub_ridie), 2)]
RCT_ridie<-function(s){
  title<-html_nodes(s, "dd")%>%html_text()
  title <- gsub("\n    ", "", title)
  title <- trimws(title)
  final<-data.frame(title)
  return(final)
}

datalist = list()
i = 1
for (i in 1:10) {
  sub_ridie_out <- read_html(paste(sub_ridie[i], sep = "[c]"))
  print(RCT_ridie(sub_ridie_out))
  final<-data.frame(RCT_ridie(sub_ridie_out))
  datalist[[i]]<-final
}
###To get dataframe out of uneven matrix
full=do.call(cbindX, datalist)
####To assign rownames
full <- tibble::rowid_to_column(full, "ID")
####To create dataset for the first 8 observations
full1<-full %>% slice(1:8)
####To get rows as variables and columns as observations
full2<-t(full1)
full3=as.data.frame(full2)
full3$V8<-as.character(full3$V8)
full3$V7<-as.character(full3$V7)
full3<-full3%>%mutate_all(na_if,"")
full3$V8<-ifelse(is.na(full3$V8), full3$V7, full3$V8)
full3$V7<-ifelse(full3$V7==full3$V8, NA, full3$V7)


m1<-matrix(datalist, ncol=10, byrow=TRUE)
d1 <- as.data.frame(datalist, optional=TRUE, stringsAsFactors=FALSE,make.names=TRUE, 
                    fix.empty.names=TRUE)
myDF <- data.frame(columnNameILike = row.names(m1), m1)
?data.frame
d1 <- as.data.frame(m1[[1]], stringsAsFactors=FALSE)
d2 <- as.data.frame(m1[[2]], stringsAsFactors=FALSE)
d3 <- as.data.frame(m1[[3]], stringsAsFactors=FALSE)
dd <- merge(d1, d2, by="row.names", all=TRUE)


?merge
X <- split(dd, dd$g)
str(X)

?rbind

?merge
?combine_first
Map(cbind.fill, h, g, MoreArgs = list(fill=NA))
d2<-as.data.frame
d2$title<-as.data.frame(m1[1,10])


###For Egap
egap<-read_html("https://egap.org/registry/")
egap%>%
  html_nodes("div.c-design-registry__item-title.o-h6.u-c-navy-blue.u-fw-600")%>%
  html_text
sub_egap<-html_nodes(egap, "div.c-design-registry__item-title.o-h6.u-c-navy-blue.u-fw-600")%>%
  html_children()%>%
  html_attr("href")
sub_egap <- sub_egap[!is.na(sub_egap)][1:12]
sub_egap

RCT<-function(s){
  title<-html_nodes(s, "p._ResponseValue_17j1v8._Element_t890a9")%>%html_text()
  category<-html_nodes(s, "div._span")%>%html_text()
  final<-data.frame(title, category)
  return(final)
}

i = 1
for (i in 1:12) {
  sub_egap_out <- read_html(paste(sub_egap[i], sep = ""))
  print(RCT(sub_egap_out))
}

full=data.frame(sub_egap_out)


check<-read_html("https://osf.io/h2fa4")
check%>%
  html_nodes("p")%>%
  html_text()

?html_node

html_nodes(s, "div._span")%>%html_text()

install.packages("RSelenium")
install.packages("rvest")
require(RSelenium)
require(rvest)
system('docker run -d -p 4445:4444 selenium/standalone-firefox')



ridie<-read_html("https://ridie.3ieimpact.org/index.php?r=search/index")
ridie%>%
  html_nodes("td")%>%
  html_text
sub_pages<-html_nodes(ridie, "li")%>%
  html_children()%>%
  html_attr("href")


sub_pages <- sub_pages[!is.na(sub_pages)][1:46]
sub_pages<-str_remove(sub_pages, "#")
?gsub
m2<-as.list(sub_pages)


###Full script for ridie website
dataist=list()
datapipst=list()
i=1
for (i in 1:21){
  #print the link you are collecting
  print(paste("https://ridie.3ieimpact.org/index.php?r=search/index&ajax=search-results-gridview&study_page=",toString(1*i),sep=""))
  #get the link
  ridie <-read_html(paste("https://ridie.3ieimpact.org/index.php?r=search/index&ajax=search-results-gridview&study_page=",toString(1*i),sep=""))
  
  sub_ridie<-html_nodes(ridie, "td")%>%
    html_children()%>%
    html_attr("href")
  sub_ridie <- sub_ridie[!is.na(sub_ridie)][1:20]
  sub_ridie<-sub_ridie[seq(1, length(sub_ridie), 2)]
  RCT_ridie<-function(s){
    title<-html_nodes(s, "dd")%>%html_text()
    title <- gsub("\n    ", "", title)
    title <- trimws(title)
    final<-data.frame(title)
    return(final)
  }
  dataist = list()
  ii = 1
  for (ii in 1:10) {
    sub_ridie_out <- read_html(paste(sub_ridie[ii], sep = "[c]"))
    print(RCT_ridie(sub_ridie_out))
    final<-data.frame(RCT_ridie(sub_ridie_out))
    dataist[[ii]]<-final
  }
  fifinal<-do.call(cbindX, dataist)
  datapipst[[i]]<-fifinal
  Sys.sleep(1)
}
full=do.call(cbindX, datapipst)

full_df <- as.data.frame(t(full))
full_df[] <- lapply(full_df, as.character)
full_df<-data.frame(lapply(full_df, trimws))
full_df
write.csv(x=full_df,
          file='Ridie.csv',
          row.names = FALSE)
          
###Cleaning
ridiedie<-read.csv("/Users/vvpolt/desktop/Ridie_f.csv", header=TRUE, sep=";")
table(ridiedie$Registration.Category)
ridiedie[] <- lapply(ridiedie, as.character)
library(stringr)
ridiedie$Registration.Category<-str_squish(ridiedie$Registration.Category)

trim.leading <- function (x)  sub("^\\s+", "", x)
# Returns string without trailing white space
trim.trailing <- function (x) sub("\\s+$", "", x)
# Returns string without leading or trailing white space
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
ridiedie$Registration.Category<-trim(ridiedie$Registration.Category)
ridiedie$Title<-trim(ridiedie$Title)
ridiedie$Registration.Category <- gsub("\n                                                                           ", "", ridiedie$Registration.Category)
ridiedie$Registration.Category <- trimws(ridiedie$Registration.Category, which = "left")
ridiedie$Registration.Category
library(tidyverse)
ridiedie <- ridiedie %>% mutate_all(na_if,"")
ridiedie$Location
ridiedie$Location<-trim(ridiedie$Location)
ridiedie$Location <- gsub("\n                    ", "", ridiedie$Location)
ridiedie$Location<-str_squish(ridiedie$Location)
ridiedie$Categories<-str_squish(ridiedie$Categories)
ridiedie$Title<-str_squish(ridiedie$Title)
ridiedie$Abstract<-str_squish(ridiedie$Abstract)
ridiedie$Outcomes..Endpoints.<-str_squish(ridiedie$Outcomes..Endpoints.)
ridiedie$Name.of.Partner.Institution<-str_squish(ridiedie$Name.of.Partner.Institution)
ridiedie$Name.of.Funder.Organization<-str_squish(ridiedie$Name.of.Funder.Organization)
ridiedie$Name.of.Implementing.Organization<-str_squish(ridiedie$Name.of.Implementing.Organization)
ridiedie$Name.of.First.PI<-str_squish(ridiedie$Name.of.First.PI)
ridiedie$Name.of.Second.PI<-str_squish(ridiedie$Name.of.Second.PI)
ridiedie$Affiliation<-str_squish(ridiedie$Affiliation)
ridiedie$Affiliation.1<-str_squish(ridiedie$Affiliation.1)
ridiedie$Additional.Keywords<-str_squish(ridiedie$Additional.Keywords)
ridiedie$Registration.Citation<-str_squish(ridiedie$Registration.Citation)
ridiedie$Registration.Category<-str_squish(ridiedie$Registration.Category)
ridiedie$Details.of.Evaluation.Approach<-str_squish(ridiedie$Details.of.Evaluation.Approach)
ridiedie$Study.Status<-str_squish(ridiedie$Study.Status)
ridiedie$Study.is.3ie.funded<-str_squish(ridiedie$Study.is.3ie.funded)
ridiedie$Type.of.Organization<-str_squish(ridiedie$Type.of.Organization)
ridiedie$Type.of.Implementing.Organization<-str_squish(ridiedie$Type.of.Implementing.Organization)
ridiedie$Unit.of.Analysis<-str_squish(ridiedie$Unit.of.Analysis)
ridiedie$Additional.Evaluation.Method..If.Any.<-str_squish(ridiedie$Additional.Evaluation.Method..If.Any.)
ridiedie$Primary..or.First..Evaluation.Method<-str_squish(ridiedie$Primary..or.First..Evaluation.Method)
ridiedie$Intervention.or.Program.Started.at.time.of.Registration<-str_squish(ridiedie$Intervention.or.Program.Started.at.time.of.Registration)
ridiedie$Location.1 <- trimws(ridiedie$Location.1, which = "both")

ridiedie$Categories<-gsub("([a-z])([A-Z])", "\\1 \\2", ridiedie$Categories)
ridiedie$Additional.Keywords<-gsub("([a-z])([A-Z])", "\\1 \\2", ridiedie$Additional.Keywords)
ridiedie$Location.1<-gsub("([a-z])([A-Z])", "\\1 \\2", ridiedie$Location.1)
ridiedie$Location<-gsub("([a-z])([A-Z])", "\\1 \\2", ridiedie$Location)
table(ridiedie$Registration.Category)

ehhh<-read_csv("RIDIE_draft.csv")

write.csv(x=ridiedie,
          file='RIDIE_draft.csv',
          row.names = FALSE)
library(foreign)
write.dta(ridiedie, 
          file="RIDIE_draft.dta")



ridie<-read_xlsx('RIDIE_draft.xlsx')
ridie <- ridie %>% 
  mutate(Authors = Name.of.First.PI)
ridie<-separate(ridie, 'Authors', paste("authors", 1:7, sep="_"), sep=",", extra="drop")
write.csv(x=ridie,
          file='ridie_a.csv',
          row.names = FALSE)


ridie<-read_xlsx('ridie_a.xlsx')
ridie[ridie == "NA" ] <- NA
ridie <- ridie %>% mutate_all(na_if,"")
ridie<-separate_rows(ridie, Location, sep=",", convert = TRUE)
ridie$Location<-str_squish(ridie$Location)
ridie$impl_d<-ifelse(grepl("(Public Sector, e.g. Government Agency or Ministry)", ridie$Type.of.Implementing.Organization), 2, 1)
ridie$impl_d<-ifelse(is.na(ridie$Type.of.Implementing.Organization), 0, ridie$impl_d)
table(ridie$impl_d)
table(ridie$method_1)
ridie<-ridie %>% 
  rename(
    fund_3ie=Study.is.3ie.funded,
    ID=Study.ID,
    reg_date=Initial.Registration.Date,
    upd_date=Last.Update.Date,
    status=Study.Status,
    location=Location,
    abstract=Abstract,
    reg_cit=Registration.Citation,
    categories=Categories,
    keywords=Additional.Keywords,
    aff1=Affiliation...13,
    aff2=Affiliation.1,
    spons=Study.Sponsor,
    spons_loc=Study.Sponsor.Location,
    partn_int=Name.of.Partner.Institution,
    type_partn=Type.of.Organization,
    partn_loc=Location.1,
    impl=Name.of.Implementing.Organization,
    type_impl=Type.of.Implementing.Organization,
    funder=Name.of.Funder.Organization,
    type_funder=Type.of.Funder.Organization,
    interv_t=Intervention.or.Program.Started.at.time.of.Registration,
    method_1=Primary..or.First..Evaluation.Method,
    method_2=Other..not.Listed..Method,
    method_3=Additional.Evaluation.Method..If.Any.,
    method_4=Other..not.Listed..Method.1,
    details=Details.of.Evaluation.Approach,
    outcome=Outcomes..Endpoints.,
    unit=Unit.of.Analysis,
    reg_cat=Registration.Category,
    affil1=Affiliation...40,
    dep=Dep,
    aff_count=Aff_country,
    title=Title
  )

write.csv(x=ridie,
          file='ridie_final.csv',
          row.names = FALSE)
